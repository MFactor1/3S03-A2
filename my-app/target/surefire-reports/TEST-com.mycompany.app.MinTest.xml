<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.1" name="com.mycompany.app.MinTest" time="0.102" tests="84" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/test-classes:/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/classes:/home/matthewnesbitt/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.0/junit-jupiter-api-5.11.0.jar:/home/matthewnesbitt/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/matthewnesbitt/.m2/repository/org/junit/platform/junit-platform-commons/1.11.0/junit-platform-commons-1.11.0.jar:/home/matthewnesbitt/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/matthewnesbitt/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.0/junit-jupiter-params-5.11.0.jar:"/>
    <property name="java.vm.vendor" value="Red Hat, Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://www.redhat.com/"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="CA"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-21-openjdk/lib"/>
    <property name="sun.java.command" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/surefire/surefirebooter-20250306184004739_3.jar /home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/surefire 2025-03-06T18-40-04_692-jvmRun1 surefire-20250306184004739_1tmp surefire_0-20250306184004739_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/test-classes:/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/classes:/home/matthewnesbitt/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.0/junit-jupiter-api-5.11.0.jar:/home/matthewnesbitt/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/matthewnesbitt/.m2/repository/org/junit/platform/junit-platform-commons/1.11.0/junit-platform-commons-1.11.0.jar:/home/matthewnesbitt/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/matthewnesbitt/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.0/junit-jupiter-params-5.11.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/matthewnesbitt"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="/usr/lib/jvm/java-21-openjdk"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="surefire.real.class.path" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app/target/surefire/surefirebooter-20250306184004739_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.6+7"/>
    <property name="user.name" value="matthewnesbitt"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.13.5-200.fc41.x86_64"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="(Red_Hat-21.0.6.0.7-1)"/>
    <property name="localRepository" value="/home/matthewnesbitt/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugzilla.redhat.com/enter_bug.cgi?product=Fedora&amp;component=java-21-openjdk&amp;version=40"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="21.0.6"/>
    <property name="user.dir" value="/home/matthewnesbitt/gitrepos/3S03-A2/my-app"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Red Hat, Inc."/>
    <property name="java.vm.version" value="21.0.6+7"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="ArrayListStringTest(String, String, String, String)[1]" classname="com.mycompany.app.MinTest" time="0.006"/>
  <testcase name="ArrayListStringTest(String, String, String, String)[2]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListStringTest(String, String, String, String)[3]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListStringTest(String, String, String, String)[4]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListStringTest(String, String, String, String)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListStringTest(String, String, String, String)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ListLenOneTest" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[1]" classname="com.mycompany.app.MinTest" time="0.003"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[7]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorIntegerTest(int, int, int, int)[8]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[1]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[5]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[6]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[7]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListIntegerTest(int, int, int, int)[8]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorCharTest(char, char, char, char)[1]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorCharTest(char, char, char, char)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorCharTest(char, char, char, char)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorCharTest(char, char, char, char)[4]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorCharTest(char, char, char, char)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[1]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[5]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[7]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListIntegerTest(int, int, int, int)[8]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListCharTest(char, char, char, char)[1]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListCharTest(char, char, char, char)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListCharTest(char, char, char, char)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListCharTest(char, char, char, char)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListCharTest(char, char, char, char)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[1]" classname="com.mycompany.app.MinTest" time="0.002"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[7]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListDoubleTest(double, double, double, double)[8]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[1]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[6]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[7]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorDoubleTest(double, double, double, double)[8]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListTest" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[1]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[4]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[5]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[7]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="ArrayListDoubleTest(double, double, double, double)[8]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[1]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[2]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="LinkedListStringTest(String, String, String, String)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="CharTest(char, char, char, char)[1]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="CharTest(char, char, char, char)[2]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="CharTest(char, char, char, char)[3]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="CharTest(char, char, char, char)[4]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="CharTest(char, char, char, char)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorStringTest(String, String, String, String)[1]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorStringTest(String, String, String, String)[2]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorStringTest(String, String, String, String)[3]" classname="com.mycompany.app.MinTest" time="0.001"/>
  <testcase name="VectorStringTest(String, String, String, String)[4]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorStringTest(String, String, String, String)[5]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorStringTest(String, String, String, String)[6]" classname="com.mycompany.app.MinTest" time="0.0"/>
  <testcase name="VectorTest" classname="com.mycompany.app.MinTest" time="0.001"/>
</testsuite>